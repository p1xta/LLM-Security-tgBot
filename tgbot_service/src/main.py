import os
from contextlib import asynccontextmanager
from http import HTTPStatus
from fastapi import FastAPI, Request, Response
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
import httpx
import uvicorn
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, CallbackQueryHandler, filters

from config.settings import get_settings
from utils.get_secrets import get_all_secrets_payload
from utils.get_iam_token import get_iam_token_on_YC_vm
from log.logger import logger

settings = get_settings()

secrets_dict = get_all_secrets_payload()
TELEGRAM_TOKEN = secrets_dict["TELEGRAM_TOKEN"]
S3_BUCKET = secrets_dict["S3_BUCKET"]
WEBHOOK_DOMAIN = os.environ.get("WEBHOOK_URL", "")
ORCHESTRATOR_URL = settings.ORCHESTRATOR_URL

# --- —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
user_state = {}  # user_id -> "state"

bot_builder = (
    Application.builder()
    .token(TELEGRAM_TOKEN)
    .updater(None)
    .build()
)


@asynccontextmanager
async def lifespan(_: FastAPI):
    logger.info("–ó–∞–ø—É—Å–∫ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ WebHook")
    async with bot_builder:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await bot_builder.start()
        yield
        await bot_builder.stop()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


app = FastAPI(lifespan=lifespan)


@app.post("/")
async def process_update(request: Request):
    message = await request.json()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
    update = Update.de_json(data=message, bot=bot_builder.bot)
    await bot_builder.process_update(update)
    return Response(status_code=HTTPStatus.OK)


# --- Handlers ---
async def start(update: Update, _: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç üëã –Ø –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\
                                    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n \
                                    /upload - –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –≤–∞—à–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ. \
                                    –ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n \
                                    /delete - —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞. \n\n \
                                    –ß—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ-—Ç–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")

async def start_upload(update: Update, _: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_state[user_id] = "awaiting_file"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤")
    await update.message.reply_text("üìÇ –ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å.")

async def start_delete(update: Update, _: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    async with httpx.AsyncClient() as client:
        try:
            iam_token = await get_iam_token_on_YC_vm(client)
            response = await client.post(
                f"{ORCHESTRATOR_URL}/get_filenames",
                headers={"Authorization": f"Bearer {iam_token}"},
                data={"bucket": S3_BUCKET, "user_id": str(user_id)},
                timeout=30,
            )
            data = response.json()
            files = data.get("files", [])

            if not files:
                await update.message.reply_text("–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            keyboard = [
                [InlineKeyboardButton(f, callback_data=f"delete:{f}")]
                for f in files
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤: {e}")

async def handle_document(update: Update, _: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if user_state.get(user_id) != "awaiting_file":
        await update.message.reply_text("‚ö†Ô∏è –ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏—Ç–µ /upload")
        return

    document = update.message.document
    if not document:
        await update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
        return

    file = await document.get_file()
    file_path = f"/tmp/{document.file_name}"
    await file.download_to_drive(file_path)

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª {document.file_name}")
    
    async with httpx.AsyncClient() as client:
        try:
            if file.file_size > 30 * 1024 * 1024:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º –±–æ–ª–µ–µ 30 –ú–±–∞–π—Ç")
                raise Exception("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 30 –ú–±–∞–π—Ç")
            iam_token = await get_iam_token_on_YC_vm(client)
            print(iam_token)
            with open(file_path, "rb") as f:
                file_content = f.read()
                response = await client.post(
                    f"{ORCHESTRATOR_URL}/upload",
                    headers={
                        "Authorization": f"Bearer {iam_token}"
                    },
                    data={"user_id": str(user_id), "bucket": S3_BUCKET},
                    files={"file": (document.file_name, file_content, document.mime_type)},
                    timeout=300,
                )
            data = response.json()
            reply = data.get("message", "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è {user_id}: {reply}")
        except Exception as e:
            reply = f"‚ùå –û—à–∏–±–∫–∞: {e}"
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –æ—Ç {user_id}: {e}")

    user_state.pop(user_id, None)
    await update.message.reply_text(reply)

async def handle_delete_callback(update: Update, _: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if not data.startswith("delete:"):
        return

    file_name = data.split("delete:")[1]

    async with httpx.AsyncClient() as client:
        try:
            iam_token = await get_iam_token_on_YC_vm(client)
            response = await client.post(
                f"{ORCHESTRATOR_URL}/delete_file",
                headers={
                    "Authorization": f"Bearer {iam_token}"
                },
                data={"bucket": S3_BUCKET, "user_id": str(user_id), "file_name": file_name},
                timeout=30,
            )
            result = response.json()
            msg = result.get("message", f"–§–∞–π–ª {file_name} —É–¥–∞–ª—ë–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_name}: {e}")
            msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_name}: {e}"

    await query.edit_message_text(msg)

async def handle_message(update: Update, _: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    chat_id = update.message.chat_id
    user_id = update.message.from_user.id
    message_id = update.message.message_id
    message_date = update.message.date.strftime("%Y-%m-%d %H:%M:%S")

    processing_message = await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} ({chat_id}): {user_text}")

    async with httpx.AsyncClient() as client:
        try:
            iam_token = await get_iam_token_on_YC_vm(client)
            response = await client.post(
                f"{ORCHESTRATOR_URL}/process",
                headers={
                    "Authorization": f"Bearer {iam_token}"
                },
                json={
                    "user_id": user_id,
                    "message_id": message_id,
                    "chat_id": chat_id, 
                    "text": user_text,
                    "timestamp": message_date
                },
                timeout=300,
            )
            data = response.json()
            reply = data.get("message", "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            logger.info(f"–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {reply}")
        except Exception as e:
            reply = f"‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}"
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

    await processing_message.edit_text(reply)


if __name__ == "__main__":
    bot_builder.add_handler(CommandHandler("start", start))
    bot_builder.add_handler(CommandHandler("upload", start_upload))
    bot_builder.add_handler(CommandHandler("delete", start_delete))
    bot_builder.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    bot_builder.add_handler(CallbackQueryHandler(handle_delete_callback, pattern=r"^delete:"))
    bot_builder.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    uvicorn.run(app, host="0.0.0.0", port=int(os.environ['PORT']))