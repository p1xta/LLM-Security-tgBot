name: Build and Deploy to Yandex Cloud

on:
  push:
    branches: [ lockbox_secrets ]

env:
  REGISTRY_ID: ${{ secrets.YC_REGISTRY_ID }}
  SERVICE_ACCOUNT_ID: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
  FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Yandex Cloud CLI
      uses: nightstory/setup-yc@v1
      with:
        oauth-token: ${{ secrets.YC_OAUTH_TOKEN }}

    - name: Configure Yandex Cloud CLI
      run: yc config set token ${{ secrets.YC_OAUTH_TOKEN }}

    - name: Login to Yandex Container Registr
      uses: docker/login-action@v3
      with:
        registry: cr.yandex
        username: oauth
        password: ${{ secrets.YC_OAUTH_TOKEN }}
      
    - name: Build docker images
      run: |
        SERVICES=("rag_service" "orchestrator" "tgbot_service" "validator" "yandexgpt_service")

        for service in "${SERVICES[@]}"; do
            echo "Building $service..."
            
            cd $service
            docker build -t cr.yandex/$REGISTRY_ID/$service:latest .
            docker push cr.yandex/$REGISTRY_ID/$service:latest
            cd ..

            echo "âœ… $service image built and pushed successfully"            
        done

    - name: Get container URLs
      id: get-urls
      run: |
        SERVICES=("rag_service" "orchestrator" "tgbot_service" "validator" "yandexgpt_service")

        echo "Getting container URLs..."

        for service in "${SERVICES[@]}"; do
          container_name="${service//_/-}"
          url=$(yc serverless container get --folder-id ${{ secrets.YC_FOLDER_ID }} --name $container_name --format json | jq -r '.url // empty')
          echo "URL for $service: $url"
          clean_url="${url%?}"
          echo "$service=$clean_url" >> $GITHUB_OUTPUT
        done
      continue-on-error: true

    - name: Deploy services
      run: |
        SERVICES=("rag_service" "orchestrator" "tgbot_service" "validator" "yandexgpt_service")
        
        get_url() {
          local service=$1
          case $service in
            "rag_service") echo "${{ steps.get-urls.outputs.rag_service }}";;
            "orchestrator") echo "${{ steps.get-urls.outputs.orchestrator }}";;
            "tgbot_service") echo "${{ steps.get-urls.outputs.tgbot_service }}";;
            "validator") echo "${{ steps.get-urls.outputs.validator }}";;
            "yandexgpt_service") echo "${{ steps.get-urls.outputs.yandexgpt_service }}";;
          esac
        }

        for service in "${SERVICES[@]}"; do
          container_name="${service//_/-}"
          echo "ðŸš€ Deploying $service to container $container_name"
          
          deploy_cmd="yc serverless container revision deploy \
            --folder-id ${{ secrets.YC_FOLDER_ID }}
            --container-name $container_name \
            --image cr.yandex/${{ secrets.YC_REGISTRY_ID }}/$service:latest \
            --service-account-id ${{ secrets.YC_SERVICE_ACCOUNT_ID }} \
            --execution-timeout 3m \
            --cores 1 \
            --concurrency 1" \
            --environment FOLDER_ID=$FOLDER_ID"
          
          case $service in
            "orchestrator")
              llm_url=$(get_url "yandexgpt_service")
              validator_url=$(get_url "validator")
              rag_url=$(get_url "rag_service")
              
              if [ -n "$llm_url" ]; then
                deploy_cmd="$deploy_cmd --environment LLM_URL=$llm_url"
              fi
              if [ -n "$validator_url" ]; then
                deploy_cmd="$deploy_cmd --environment VALIDATOR_URL=$validator_url"
              fi
              if [ -n "$rag_url" ]; then
                deploy_cmd="$deploy_cmd --environment RAG_URL=$rag_url"
              fi
              ;;
              
            "tgbot_service")
              orchestrator_url=$(get_url "orchestrator")
              deploy_cmd="$deploy_cmd --min-instances=1"
              if [ -n "$orchestrator_url" ]; then
                deploy_cmd="$deploy_cmd --environment ORCHESTRATOR_URL=$orchestrator_url"
              fi
              ;;
              
            "validator")
              orchestrator_url=$(get_url "orchestrator")
              llm_url=$(get_url "yandexgpt_service")
              
              if [ -n "$orchestrator_url" ]; then
                deploy_cmd="$deploy_cmd --environment ORCHESTRATOR_URL=$orchestrator_url"
              fi
              if [ -n "$llm_url" ]; then
                deploy_cmd="$deploy_cmd --environment LLM_URL=$llm_url"
              fi
              ;;
              
            "rag_service")
              orchestrator_url=$(get_url "orchestrator")
              deploy_cmd="$deploy_cmd --min-instances=1"
              if [ -n "$orchestrator_url" ]; then
                deploy_cmd="$deploy_cmd --environment ORCHESTRATOR_URL=$orchestrator_url"
              fi
              deploy_cmd="$deploy_cmd --memory=2048MB"
              ;;
              
            "yandexgpt_service")
              orchestrator_url=$(get_url "orchestrator")
              if [ -n "$orchestrator_url" ]; then
                deploy_cmd="$deploy_cmd --environment ORCHESTRATOR_URL=$orchestrator_url"
              fi
              ;;
          esac
          
          echo "Running: $deploy_cmd"
          eval $deploy_cmd
          echo "âœ… $service deployed successfully!"
          echo "---"
        done