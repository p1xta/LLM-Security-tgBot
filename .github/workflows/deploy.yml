name: Build and Push Images

on:
  push:
    branches: [deploy_actions]

env:
  REGISTRY_ID: ${{ secrets.YC_REGISTRY_ID }}
  SERVICE_ACCOUNT_ID: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}


jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Yandex Container Registry
      uses: docker/login-action@v3
      with:
        registry: cr.yandex
        username: iam
        password: ${{ secrets.YC_OAUTH_TOKEN }}

    - name: Get container URLs and set environment variables
      id: container-urls
      run: |
        cat > get_urls.sh << 'EOF'
        #!/bin/bash
        services=("rag_service" "orchestrator" "tgbot_service" "validator" "yandexgpt_service")
        
        for service in "${services[@]}"; do
            echo "Processing $service..."
            url=$(yc serverless container get "$service" | grep -oP 'url:\s*\K[^[:space:]]+' || echo "")
            
            if [ -n "$url" ]; then
                var_name=$(echo "${service^^}" | tr '-' '_')_URL
                echo "${var_name}=${url}" >> $GITHUB_ENV
                echo "$var_name set"
            else
                echo "URL not found for $service"
            fi
        done
        EOF
        
        chmod +x get_urls.sh
        ./get_urls.sh

    - name: Build and push images
      run: |
        services=("rag_service" "orchestrator" "tgbot_service" "validator" "yandexgpt_service")
        
        for service in "${services[@]}"; do
          echo "Building $service..."
          cd $service
          docker build -t cr.yandex/$REGISTRY_ID/$service:latest .
          docker push cr.yandex/$REGISTRY_ID/$service:latest
          cd ..
        done

    - name: Deploy to Yandex Cloud
      run: |
        services=("rag_service" "orchestrator" "tgbot_service" "validator" "yandexgpt_service")
        
        for service in "${services[@]}"; do
          echo "Deploying $service..."
          
          if ! yc serverless container get --name $container_name &>/dev/null; then
            yc serverless container create --name $container_name
            echo "Container $service created"
          fi

          deploy_base="yc serverless container revision deploy \
            --container-name $service \
            --image cr.yandex/$REGISTRY_ID/$service:latest \
            --service-account-id $SERVICE_ACCOUNT_ID \
            --cores 1 --memory 512MB --concurrency 4"

          case $service in
            "orchestrator")
              deploy_base="$deploy_base --environment YANDEX_GPT_URL=$YANDEX_GPT_URL"
              deploy_base="$deploy_base --environment VALIDATOR_URL=$VALIDATOR_URL"
              deploy_base="$deploy_base --environment RAG_URL=$RAG_URL"
              ;;
            "tgbot")
              deploy_base="$deploy_base --environment ORCHESTRATOR_URL=$ORCHESTRATOR_URL"
              deploy_base="$deploy_base --connectivity external --concurrency 16"
              ;;
            "validator")
              deploy_base="$deploy_base --environment ORCHESTRATOR_URL=$ORCHESTRATOR_URL"
              ;;
            "rag")  
              deploy_base="$deploy_base --environment ORCHESTRATOR_URL=$ORCHESTRATOR_URL"
              ;;
            "yandexgpt")
              deploy_base="$deploy_base --environment ORCHESTRATOR_URL=$ORCHESTRATOR_URL"
              ;;
          esac
          
          # Выполняем деплой
          eval $deploy_base
          echo "$service deployed"
        done

    - name: Display final URLs
      run: |
        echo "Deployment completed!"
        echo "Container URLs:"
        echo "   ORCHESTRATOR_URL: $ORCHESTRATOR_URL"
        echo "   YANDEX_GPT_URL: $YANDEX_GPT_URL" 
        echo "   VALIDATOR_URL: $VALIDATOR_URL"
        echo "   RAG_URL: $RAG_URL"
        echo "   TG_BOT_URL: $TG_BOT_URL"