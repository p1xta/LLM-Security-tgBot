name: Build and Deploy to Yandex Cloud

on:
  push:
    branches: [ deploy_actions ]

env:
  REGISTRY_ID: ${{ secrets.YC_REGISTRY_ID }}
  SERVICE_ACCOUNT_ID: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
  FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Yandex Cloud CLI
      uses: nightstory/setup-yc@v1
      with:
        oauth-token: ${{ secrets.YC_OAUTH_TOKEN }}

    - name: Configure Yandex Cloud CLI
      run: yc config set token ${{ secrets.YC_OAUTH_TOKEN }}

    - name: Login to Yandex Container Registr
      uses: docker/login-action@v3
      with:
        registry: cr.yandex
        username: oauth
        password: ${{ secrets.YC_OAUTH_TOKEN }}

    - name: Build docker images
      run: |
        SERVICES=("rag_service" "orchestrator" "tgbot_service" "validator" "yandexgpt_service")

        for service in "${SERVICES[@]}"; do
            echo "Building $service..."
            
            cd $service
            docker build -t cr.yandex/$REGISTRY_ID/$service:latest .
            docker push cr.yandex/$REGISTRY_ID/$service:latest
            cd ..

            echo "✅ $service image built and pushed successfully"            
        done

    - name: Setup containers
      run: |
        SERVICES=("rag_service" "orchestrator" "tgbot_service" "validator" "yandexgpt_service")

        for service in "${SERVICES[@]}"; do
            echo "Setting up container: $container_name"
          
          if ! yc serverless container get --name $container_name &>/dev/null; then
            echo "Creating new container: $container_name"
            yc serverless container create --name $container_name
          else
            echo "Container $container_name already exists"
          fi
        done
    - name: Get container URLs
      id: get-urls
      run: |
        SERVICES=("rag_service" "orchestrator" "tgbot_service" "validator" "yandexgpt_service")

        echo "Getting container URLs..."
        
        for service in "${SERVICES[@]}"; do
          url=$(yc serverless container get --name $container_name --format json | jq -r '.url // empty')
          
          if [ -n "$url" ]; then
            echo "URL for $service: $url"
            clean_url="${url%?}"
          else
            echo "⚠️ URL not found for $container_name"
          fi
        done
      continue-on-error: true